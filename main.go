package main

import (
	"bufio"
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"strings"
	"text/template"
)

type TabShell struct {
	ProtoList string
	TableList string
}

// 输入的模板
var flagInputFileName = flag.String("template", "", "template of output file format, go text/template format")

// 电子表格列表文件
var flagTableList = flag.String("tablist", "", "xls file list")

// proto列表文件
var flagProtoList = flag.String("protolist", "", "proto file list")

// 输出格式类型
var flagOutputType = flag.String("type", "", "output file type, 'bat' 'bash' ")

// 输出文件
var flagOutputFileName = flag.String("out", "out", "output file name")

func readFileContent(filename string) (string, error) {
	inputFile, err := os.Open(*flagInputFileName)
	if err != nil {
		return "", err
	}

	data, err := ioutil.ReadAll(inputFile)
	if err != nil {
		return "", err
	}

	return string(data), nil
}

func readListFile(filename string) ([]string, error) {

	inputFile, err := os.Open(filename)
	if err != nil {
		return nil, err
	}

	reader := bufio.NewReader(inputFile)

	list := make([]string, 0)

	for {
		part, prefix, err := reader.ReadLine()
		if err != nil {
			break
		}

		if !prefix {

			// 去掉空行
			content := strings.TrimSpace(string(part))
			if content != "" {
				list = append(list, content)
			}

		}

	}

	return list, nil

}

func makeListString(list []string, linejoint string) string {

	var buffer bytes.Buffer
	for index, v := range list {

		// 行末
		if index == len(list)-1 {
			buffer.WriteString(fmt.Sprintf("%s\r\n", v))

		} else {
			buffer.WriteString(fmt.Sprintf("%s %s\r\n", v, linejoint))
		}
	}

	return buffer.String()
}

func main() {
	flag.Parse()

	// 读模板
	templateBody, err := readFileContent(*flagInputFileName)

	if err != nil {
		fmt.Println(err)
		return
	}
	temp, err := template.New("tabshell").Parse(templateBody)

	if err != nil {
		fmt.Println(err)
		return
	}

	var linejoint string

	switch *flagOutputType {
	case "bat":
		linejoint = "^"
	case "bash":
		linejoint = "\\"
	default:
		fmt.Println("error output type")
		return
	}

	// 准备填充数据
	templateArg := new(TabShell)

	// 读取电子表格文件列表
	tabList, err := readListFile(*flagTableList)
	if err != nil {
		fmt.Println(err)
		return
	}

	// 读取协议文件列表
	ProtoList, err := readListFile(*flagProtoList)
	if err != nil {
		fmt.Println(err)
		return
	}

	templateArg.TableList = makeListString(tabList, linejoint)
	templateArg.ProtoList = makeListString(ProtoList, linejoint)

	// 准备输出文件
	outFile, err := os.Create(*flagOutputFileName)
	if err != nil {
		fmt.Println(err)
		return
	}

	// 文件注释头
	switch *flagOutputType {
	case "bat":
		outFile.WriteString(": Generated by tabshgen, DO NOT EDIT\r\n")
	default:
		fmt.Println("error output type")
		return
	}

	temp.Execute(outFile, templateArg)
}
